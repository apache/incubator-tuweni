/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.tuweni.scuttlebutt.lib

import io.vertx.core.Vertx
import kotlinx.coroutines.runBlocking
import org.apache.tuweni.crypto.sodium.Sodium
import org.apache.tuweni.junit.VertxExtension
import org.apache.tuweni.junit.VertxInstance
import org.junit.jupiter.api.Assertions
import org.junit.jupiter.api.Assertions.assertEquals
import org.junit.jupiter.api.Assumptions
import org.junit.jupiter.api.BeforeAll
import org.junit.jupiter.api.Disabled
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.extension.ExtendWith

@ExtendWith(VertxExtension::class)
internal class InviteTest {
  companion object {
    @JvmStatic
    @BeforeAll
    fun checkSodium() {
      Assumptions.assumeTrue(Sodium.isAvailable(), "Sodium native library is not available")
    }
  }
  /**
   * Tests that it is possible to generate a test invite code.
   */
  @Test
  @Throws(Exception::class)
  fun testGenerateInvite(@VertxInstance vertx: Vertx) = runBlocking {
    val scuttlebuttClient = Utils.getMasterClient(vertx)
    val invite = scuttlebuttClient.networkService.generateInviteCode(10000)
    val invite2 = scuttlebuttClient.networkService.generateInviteCode(10000)
    assertEquals(invite.identity.publicKeyAsBase64String(), invite2.identity.publicKeyAsBase64String())
  }

  /**
   * Tests it's possible to request the server uses an invite code generated by another node.
   */
  @Disabled("will not work with CI right now")
  @Test
  @Throws(Exception::class)
  fun testUseInvite(@VertxInstance vertx: Vertx) = runBlocking {
    val masterClient = Utils.getMasterClient(vertx)
    val invite = masterClient.networkService.generateInviteCode(10000)
    val scuttlebuttClient = Utils.connectWithInvite(vertx, invite)
    Assertions.assertNotNull(scuttlebuttClient)
  }
}
